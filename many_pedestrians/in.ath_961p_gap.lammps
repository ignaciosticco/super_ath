# Pedestrians in a 2D box with two doors

variable pre_gapmax equal 1
variable pre_gap loop 1 ${pre_gapmax}
label start_of_loop4			# Loop de gap

variable pre_vdmax equal 1
variable pre_vd loop 1 ${pre_vdmax}
label start_of_loop1
print "ITERATION pre_vd = ${pre_vd}"		# Loop de velocidad de deseo

variable itermax equal 30
variable iter loop 1 ${itermax}
label start_of_loop2
print "ITERATION iter = ${iter}"		# Loop de corrida

# INITIAL CONDITIONS

# room: 20x20 meters with 225 individuals 
# doors:2 doors of 1.2 meters width (each)

dimension        2
boundary         f f p

units            si
atom_style       sphere

variable		 gap equal (${pre_gap}/4)-0.25
variable		 gd1 equal 20+(${gap}/2)
variable 		 gu1 equal 21.2+(${gap}/2)
variable 		 gu2 equal 20-(${gap}/2)
variable 		 gd2 equal 18.8-(${gap}/2)

lattice          sq 1.3 origin 0.5 0.5 0.0
region           zona1 block 0 40 0 40 -1 1 units box
region           zona2 block 40.12 80 0 40 -1 1 units box
region           zona3 block 39    41 ${gd1}  ${gu1} -1 1 units box
region           zona4 block 39    41 ${gd2}  ${gu2} -1 1 units box
region           todas union 4 zona1 zona2 zona3 zona4

create_box       1 todas
create_atoms     1 region zona1
set              atom * mass 70.0
set              atom * diameter 0.6

velocity         all create 1e23 ${iter} dist gaussian   		# gaussian distribution
comm_modify      vel yes                                        # required for gran/social style

pair_style       hybrid/overlay gran/social 0 0 0 240000 0 1 social 0.08 3.5          
pair_coeff       * * social 2000 3.5 0.3                                           
pair_coeff       * * gran/social
fix walls		 all wall/room todas 2000 0.08 3.5 240000 0.0 0.0

# BOUNDARY CONDITIONS

variable 		vd equal (2*${pre_vd})
   
fix target all social/self/multid 70 ${vd} ${gap} xy

compute 		x all property/atom x          # get the atoms x-coordinate
variable  		b atom c_x>40.0                # check for atoms out of the room
compute 		mycompute all reduce sum v_b   # count for atoms outside the room
variable 		num_evac equal c_mycompute     # 'num_evac' is needed for stopping the process (see bellow)

### BLOCKING CLUSTERS ###
#variable  		d1 atom c_dijkstra1>0.0
#compute 		reducdij1 all reduce sum v_d1
#variable 		dijk1 equal c_reducdij1

### PRESSURE AND SPEED ###
#variable    speed atom sqrt(vx*vx+vy*vy)
#compute     ps all social_pressure/atom
#dump        presion all custom 500 in_print_press_vel_225p_v_ath.txt x c_ps v_speed
#dump_modify presion append  yes

# VISUALIZATION 

#dump        3 all movie 200 in_movie_v${vd}_g${gap}.mpg type type &
#            axes yes 0.8 0.02 view 0 0 zoom 2 adiam 0.6

# RUN THE PROCESS

atom_modify   sort 0 0.0
timestep      0.0001
fix           1 all nve/limit 0.001
#thermo       500
thermo_style  custom step c_mycompute #c_reducdij1 

# ESTE ES EL LOOP DE UN PROCESO

variable nmax equal 20000
variable n loop ${nmax}
label start_of_loop3
	
run           500 
if "${num_evac} > 1" then "jump SELF break"

variable t equal 0.05*$n

if "$t>3000" then "jump SELF break"

next n
jump SELF start_of_loop3

# TERMINACION DEL PROCESO

label break

print "${vd}   ${iter}   $t" append print_superath_961p_fisf.txt

clear
variable n delete
next iter
jump SELF start_of_loop2
# TERMINACION DEL LOOP 2

clear
next pre_vd
jump SELF start_of_loop1

next pre_gap
jump SELF start_of_loop4