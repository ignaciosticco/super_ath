# Pedestrians in a 2D box with two doors

variable imax equal 5
variable i loop 5 ${imax}
label start_of_loop1
print "ITERATION i = $i"		# Loop de velocidad de deseo

variable jmax equal 1
variable j loop 1 ${jmax}
label start_of_loop2
print "ITERATION j = $j"		# Loop de corrida

# INITIAL CONDITIONS

# room: 20x20 meters with 225 individuals 
# one door of 1.2 meters width

dimension        2
boundary         f f p
units            si
atom_style       sphere

lattice          sq 1.3 origin 0.5 0.5 0.0
region           zona1 block 0 20 0 20 -1 1 units box
region           zona2 block 20.12 40 0 20 -1 1 units box
region           zona3 block 19 21 9.4 10.6 -1 1 units box
region           todas union 3 zona1 zona2 zona3

create_box       1 todas
create_atoms     1 region zona1
set              atom * mass 70.0
set              atom * diameter 0.6
velocity         all create 1e23 $j dist gaussian   		# gaussian distribution
comm_modify      vel yes                                    # required for gran/social style

pair_style       hybrid/overlay gran/social 0 0 0 240000 0 1 social 0.08 3.5          
pair_coeff       * * social 2000 3.5 0.3                                           
pair_coeff       * * gran/social

#group			 sub id 100 


# BOUNDARY CONDITIONS

variable 		k equal 2*$i

fix walls all wall/region todas social 2000 0.08 3.5
fix wallg all wall/region todas granular 240000 120000 0.001      # k=240000 unused=1 rad=0.001
fix target all social/self 70 $k xy    

compute 		1 all property/atom x                     # get the atoms x-coordinate
variable  		b atom c_1>20.0                           # check for atoms out of the room
compute 		mycompute all reduce sum v_b              # count for atoms outside the room
variable 		s equal c_mycompute                       # 's' is needed for stopping the process (see bellow)


### Blocking clusters ###
compute 	dijkstra1 all dijkstra/atom 9.4 10.6 20 4 
variable  	d1 atom c_dijkstra1>0.0
compute 	reducdij1 all reduce sum v_d1
variable 	dijk1 atom c_reducdij1

### Forces ###
variable    pi equal 3.1415
compute     ps all helbing_pressure/atom
variable 	fs atom  2*v_pi*0.3*c_ps 
compute     fg all granular_helbing/atom
compute 	fd all desired_helbing/atom 70 $k

dump        fuerzas all custom 500 print_forces_1.2m_v$k_test.txt x y c_fd v_fs c_fg v_d1 
dump_modify fuerzas append  yes


# VISUALIZATION (OPTIONAL)

#dump        3 all movie 200 in_movie_v$k.mpg type type &
#            axes yes 0.8 0.02 view 0 0 zoom 3 adiam 0.6

# RUN THE PROCESS

atom_modify   sort 0 0.0
timestep      0.0001
fix           1 all nve
#thermo       500
thermo_style  custom step c_mycompute c_reducdij1 

# ESTE ES EL LOOP DE UN PROCESO


variable nmax equal 20000
variable n loop ${nmax}
label start_of_loop3
	
run           500 
if "$s > 159" then "jump SELF break"


variable t equal 0.05*$n
if "$t>3000" then "jump SELF break"

#print "$t ${dijk1}" append in_print_225p_g$g_v$k_block.txt

next n

jump SELF start_of_loop3


# TERMINACION DEL PROCESO

label break

#print "$g   $k   $j   $t" append in_print_fis_961p_g$g_ath3.txt

clear
variable n delete
next j
jump SELF start_of_loop2
# TERMINACION DEL LOOP 2

clear
next i
jump SELF start_of_loop1

